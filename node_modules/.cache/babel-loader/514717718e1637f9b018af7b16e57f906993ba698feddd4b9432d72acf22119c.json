{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\n\n/**\n * @interface Kanji\n *  @property {number} id - selected kanji's id\n * @property {string} character - selected kanji character\n * @property {string} url - link to kanji's page on wanikani\n * @property {number} level - level where kanji is introduced\n * @property {string[]} meanings - array of possible meanings\n * @property {number[]} similarIds - array of similar kanji's ids\n */\n\nconst initialState = {\n  currentKanjiId: 0,\n  answered: false,\n  correct: null,\n  validKanji: []\n};\nconst questionSlice = createSlice({\n  name: \"question\",\n  initialState,\n  reducers: {\n    setCurrentKanjiId: (state, action) => {\n      state.currentKanjiId = action.payload;\n    },\n    setAnswered: (state, action) => {\n      state.answered = action.payload;\n    },\n    setCorrect: (state, action) => {\n      state.correct = action.payload;\n    },\n    setValidKanji: (state, action) => {\n      // state.validKanji = action.payload;\n      if (current(state).validKanji.length === 0) {\n        state.validKanji = action.payload;\n      } else {\n        state.validKanji = [...current(state).validKanji, action.payload];\n      }\n    }\n  }\n});\nexport const {\n  setCurrentKanjiId,\n  setAnswered,\n  setCorrect,\n  setValidKanji\n} = questionSlice.actions;\nexport const initStudy = (selectedLevels = null, selectedStages = null) => {\n  return async (dispatch, useState) => {\n    let url = \"https://api.wanikani.com/v2/subjects?types=kanji&started=true\";\n    if (selectedLevels !== null) {\n      url += `&levels=${selectedLevels}`;\n    } else if (selectedStages !== null) {\n      url += `&srs_stages=${selectedStages}`;\n    }\n    console.log(\"url\", url, selectedLevels, selectedStages);\n    // const apiKey = useState().user.apiKey;\n\n    // // recursively fetch all pages of kanji ids\n    // const fetchIds = async (url: string | null) => {\n    //   if (url) {\n    //     await axios\n    //       .get(url, {\n    //         headers: {\n    //           Authorization: `Bearer ${apiKey}`,\n    //         },\n    //       })\n    //       .then((res) => {\n    //         console.log(\"fetched\", res.data);\n\n    //         dispatch(\n    //           setValidKanji(\n    //             res.data.data\n    //               .filter(\n    //                 (kanji: ReturnedKanjiData) =>\n    //                   kanji.data.visually_similar_subject_ids.length > 1\n    //               )\n    //               .map((kanji: ReturnedKanjiData) => {\n    //                 return {\n    //                   id: kanji.id,\n    //                   character: kanji.data.characters,\n    //                   url: kanji.url,\n    //                   level: kanji.data.level,\n    //                   meanings: kanji.data.meanings.map(\n    //                     (meaning) => meaning.meaning\n    //                   ),\n    //                   similarIds: kanji.data.visually_similar_subject_ids,\n    //                 };\n    //               })\n    //           )\n    //           // setValidKanji(res.data.data.filter())\n    //         );\n\n    //         if (\n    //           res.data.pages.per_page > res.data.total_count &&\n    //           res.data.pages.next_url\n    //         ) {\n    //           console.log(\"fetching next page\");\n    //           fetchIds(res.data.pages.next_url);\n    //         }\n    //       })\n    //       .catch((err) => {\n    //         console.log(err);\n    //       });\n    //   }\n    // };\n\n    // await fetchIds(url);\n  };\n};\nexport default questionSlice.reducer;\n// holds selected kanji, possible answers, answer, etc","map":{"version":3,"names":["createSlice","current","initialState","currentKanjiId","answered","correct","validKanji","questionSlice","name","reducers","setCurrentKanjiId","state","action","payload","setAnswered","setCorrect","setValidKanji","length","actions","initStudy","selectedLevels","selectedStages","dispatch","useState","url","console","log","reducer"],"sources":["/Users/smanor/Development/code/personal/wk-similar/src/reducers/QuestionReducer.ts"],"sourcesContent":["import { createSlice, current } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\ninterface ReturnedKanjiData {\n  data: {\n    amalgamation_subject_ids: number[];\n    auxiliary_meanings: [\n      {\n        meaning: string;\n        type: string;\n      }\n    ];\n    characters: string;\n    component_subject_ids: number[];\n    created_at: string | null;\n    document_url: string;\n    hidden_at: string | null;\n    lesson_position: number;\n    level: number;\n    meaning_hint: string;\n    meaning_mnemonic: string;\n    meanings: [\n      {\n        meaning: string;\n        primary: boolean;\n        accepted_answer: boolean;\n      }\n    ];\n    reading_hint: string;\n    reading_mnemonic: string;\n    readings: [\n      {\n        reading: string;\n        primary: boolean;\n        accepted_answer: boolean;\n        type: string;\n      }\n    ];\n    slug: string;\n    visually_similar_subject_ids: number[];\n  };\n  data_updated_at: string;\n  id: number;\n  object: \"kanji\";\n  url: string;\n}\n\n/**\n * @interface Kanji\n *  @property {number} id - selected kanji's id\n * @property {string} character - selected kanji character\n * @property {string} url - link to kanji's page on wanikani\n * @property {number} level - level where kanji is introduced\n * @property {string[]} meanings - array of possible meanings\n * @property {number[]} similarIds - array of similar kanji's ids\n */\nexport interface Kanji {\n  id: number;\n  character: string;\n  url: string;\n  level: number;\n  meanings: string[];\n  similarIds: number[];\n}\n\ninterface QuestionState {\n  // currentKanji: Kanji;\n  currentKanjiId: number;\n  answered: boolean;\n  correct: boolean | null;\n  validKanji: Kanji[];\n}\n\nconst initialState: QuestionState = {\n  currentKanjiId: 0,\n  answered: false,\n  correct: null,\n  validKanji: [],\n};\n\nconst questionSlice = createSlice({\n  name: \"question\",\n  initialState,\n  reducers: {\n    setCurrentKanjiId: (state, action) => {\n      state.currentKanjiId = action.payload;\n    },\n    setAnswered: (state, action) => {\n      state.answered = action.payload;\n    },\n    setCorrect: (state, action) => {\n      state.correct = action.payload;\n    },\n    setValidKanji: (state, action) => {\n      // state.validKanji = action.payload;\n      if (current(state).validKanji.length === 0) {\n        state.validKanji = action.payload;\n      } else {\n        state.validKanji = [...current(state).validKanji, action.payload];\n      }\n    },\n  },\n});\n\nexport const { setCurrentKanjiId, setAnswered, setCorrect, setValidKanji } =\n  questionSlice.actions;\n\nexport const initStudy = (\n  selectedLevels: string | null = null,\n  selectedStages: string | null = null\n) => {\n  return async (dispatch: any, useState: any) => {\n    let url = \"https://api.wanikani.com/v2/subjects?types=kanji&started=true\";\n    if (selectedLevels !== null) {\n      url += `&levels=${selectedLevels}`;\n    } else if (selectedStages !== null) {\n      url += `&srs_stages=${selectedStages}`;\n    }\n\n    console.log(\"url\", url, selectedLevels, selectedStages);\n    // const apiKey = useState().user.apiKey;\n\n    // // recursively fetch all pages of kanji ids\n    // const fetchIds = async (url: string | null) => {\n    //   if (url) {\n    //     await axios\n    //       .get(url, {\n    //         headers: {\n    //           Authorization: `Bearer ${apiKey}`,\n    //         },\n    //       })\n    //       .then((res) => {\n    //         console.log(\"fetched\", res.data);\n\n    //         dispatch(\n    //           setValidKanji(\n    //             res.data.data\n    //               .filter(\n    //                 (kanji: ReturnedKanjiData) =>\n    //                   kanji.data.visually_similar_subject_ids.length > 1\n    //               )\n    //               .map((kanji: ReturnedKanjiData) => {\n    //                 return {\n    //                   id: kanji.id,\n    //                   character: kanji.data.characters,\n    //                   url: kanji.url,\n    //                   level: kanji.data.level,\n    //                   meanings: kanji.data.meanings.map(\n    //                     (meaning) => meaning.meaning\n    //                   ),\n    //                   similarIds: kanji.data.visually_similar_subject_ids,\n    //                 };\n    //               })\n    //           )\n    //           // setValidKanji(res.data.data.filter())\n    //         );\n\n    //         if (\n    //           res.data.pages.per_page > res.data.total_count &&\n    //           res.data.pages.next_url\n    //         ) {\n    //           console.log(\"fetching next page\");\n    //           fetchIds(res.data.pages.next_url);\n    //         }\n    //       })\n    //       .catch((err) => {\n    //         console.log(err);\n    //       });\n    //   }\n    // };\n\n    // await fetchIds(url);\n  };\n};\n\nexport default questionSlice.reducer;\n// holds selected kanji, possible answers, answer, etc\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,QAAQ,kBAAkB;;AA+CvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBA,MAAMC,YAA2B,GAAG;EAClCC,cAAc,EAAE,CAAC;EACjBC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAE,IAAI;EACbC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,aAAa,GAAGP,WAAW,CAAC;EAChCQ,IAAI,EAAE,UAAU;EAChBN,YAAY;EACZO,QAAQ,EAAE;IACRC,iBAAiB,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACR,cAAc,GAAGS,MAAM,CAACC,OAAO;IACvC,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACP,QAAQ,GAAGQ,MAAM,CAACC,OAAO;IACjC,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACDG,aAAa,EAAEA,CAACL,KAAK,EAAEC,MAAM,KAAK;MAChC;MACA,IAAIX,OAAO,CAACU,KAAK,CAAC,CAACL,UAAU,CAACW,MAAM,KAAK,CAAC,EAAE;QAC1CN,KAAK,CAACL,UAAU,GAAGM,MAAM,CAACC,OAAO;MACnC,CAAC,MAAM;QACLF,KAAK,CAACL,UAAU,GAAG,CAAC,GAAGL,OAAO,CAACU,KAAK,CAAC,CAACL,UAAU,EAAEM,MAAM,CAACC,OAAO,CAAC;MACnE;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,iBAAiB;EAAEI,WAAW;EAAEC,UAAU;EAAEC;AAAc,CAAC,GACxET,aAAa,CAACW,OAAO;AAEvB,OAAO,MAAMC,SAAS,GAAGA,CACvBC,cAA6B,GAAG,IAAI,EACpCC,cAA6B,GAAG,IAAI,KACjC;EACH,OAAO,OAAOC,QAAa,EAAEC,QAAa,KAAK;IAC7C,IAAIC,GAAG,GAAG,+DAA+D;IACzE,IAAIJ,cAAc,KAAK,IAAI,EAAE;MAC3BI,GAAG,IAAI,WAAWJ,cAAc,EAAE;IACpC,CAAC,MAAM,IAAIC,cAAc,KAAK,IAAI,EAAE;MAClCG,GAAG,IAAI,eAAeH,cAAc,EAAE;IACxC;IAEAI,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,GAAG,EAAEJ,cAAc,EAAEC,cAAc,CAAC;IACvD;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;EACF,CAAC;AACH,CAAC;AAED,eAAed,aAAa,CAACoB,OAAO;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}