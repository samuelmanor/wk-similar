{"ast":null,"code":"var _jsxFileName = \"/Users/smanor/Development/code/personal/wk-similar/src/components/Question.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Option } from \"./Option\";\nimport { setAnswered, setCorrect } from \"../reducers/QuestionReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Question = () => {\n  _s();\n  const [optionIds, setOptionIds] = useState([]);\n  const kanji = useSelector(state => state.question.kanji);\n  const dispatch = useDispatch();\n\n  /**\n   * Generates question options from selected kanji's similar kanji, and selected kanji\n   */\n  const pickOptions = () => {\n    let arr = [...kanji.similarIds]; // copy array\n\n    // if more than 3 similar kanji, pick 3 random ones\n    if (arr.length > 3) {\n      arr.sort(() => Math.random() - 0.5); // randomize array\n      arr = arr.slice(0, 3); // take first 3 elements\n    }\n    arr.push(kanji.id); // add selected kanji to end of array\n\n    // randomize array\n    arr = arr.sort(() => Math.random() - 0.5);\n    setOptionIds(arr);\n  };\n  const handleAnswer = id => {\n    dispatch(setAnswered(true));\n    if (id === kanji.id ? true : false) {\n      dispatch(setCorrect(true));\n    }\n  };\n  useEffect(() => {\n    pickOptions();\n  }, [kanji]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"select the kanji that means\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: kanji.meanings[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: kanji.meanings.map((meaning, i) => {\n        if (i === 0) {\n          return null;\n        } else if (i === kanji.meanings.length - 1) {\n          return meaning;\n        } else {\n          return meaning + \", \";\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: optionIds.map(id => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleAnswer(id),\n        children: /*#__PURE__*/_jsxDEV(Option, {\n          id: id\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Question, \"EgyVW0/t1HLMtWmIRC+c4vR+ryI=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Question;\nvar _c;\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","Option","setAnswered","setCorrect","jsxDEV","_jsxDEV","Question","_s","optionIds","setOptionIds","kanji","state","question","dispatch","pickOptions","arr","similarIds","length","sort","Math","random","slice","push","id","handleAnswer","children","fileName","_jsxFileName","lineNumber","columnNumber","meanings","map","meaning","i","onClick","_c","$RefreshReg$"],"sources":["/Users/smanor/Development/code/personal/wk-similar/src/components/Question.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { kanji } from \"../reducers/QuestionReducer\";\nimport { Option } from \"./Option\";\nimport { setAnswered, setCorrect } from \"../reducers/QuestionReducer\";\n\ninterface QuestionProps {}\n\nexport const Question: FC<QuestionProps> = () => {\n  const [optionIds, setOptionIds] = useState<number[]>([]);\n  const kanji = useSelector(\n    (state: { question: { kanji: kanji } }) => state.question.kanji\n  );\n\n  const dispatch = useDispatch();\n\n  /**\n   * Generates question options from selected kanji's similar kanji, and selected kanji\n   */\n  const pickOptions = () => {\n    let arr = [...kanji.similarIds]; // copy array\n\n    // if more than 3 similar kanji, pick 3 random ones\n    if (arr.length > 3) {\n      arr.sort(() => Math.random() - 0.5); // randomize array\n      arr = arr.slice(0, 3); // take first 3 elements\n    }\n\n    arr.push(kanji.id); // add selected kanji to end of array\n\n    // randomize array\n    arr = arr.sort(() => Math.random() - 0.5);\n\n    setOptionIds(arr);\n  };\n\n  const handleAnswer = (id: number) => {\n    dispatch(setAnswered(true));\n    if (id === kanji.id ? true : false) {\n      dispatch(setCorrect(true));\n    }\n  };\n\n  useEffect(() => {\n    pickOptions();\n  }, [kanji]);\n\n  return (\n    <div>\n      <h2>select the kanji that means</h2>\n      <h1>{kanji.meanings[0]}</h1>\n      <h3>\n        {kanji.meanings.map((meaning: string, i: number) => {\n          if (i === 0) {\n            return null;\n          } else if (i === kanji.meanings.length - 1) {\n            return meaning;\n          } else {\n            return meaning + \", \";\n          }\n        })}\n      </h3>\n      {/* <button onClick={() => pickOptions()}>test</button> */}\n      <div>\n        {optionIds.map((id: number) => (\n          <div onClick={() => handleAnswer(id)} key={id}>\n            <Option key={id} id={id} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}